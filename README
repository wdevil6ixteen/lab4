
1. Создание нового проекта
- Установлен новый проект Laravel с использованием Composer.
- Настроена база данных:
  - Создана база данных `task_manager`.
  - Внесены изменения в файл `.env` для подключения к MySQL.

2. Реализация таблиц и моделей
- Созданы миграции для таблиц `categories` и `tasks`:
  - Таблица `categories` содержит поля `id`, `name`, `timestamps`.
  - Таблица `tasks` содержит поля `id`, `title`, `description`, `due_date`, `category_id`, `timestamps`.
- Созданы модели `Category` и `Task` с настройками отношений:
  - `Category` имеет связь `hasMany` с задачами.
  - `Task` имеет связь `belongsTo` с категорией.

3. Разработка маршрутов
- В файле `web.php` добавлены следующие маршруты:
  - `Route::resource('tasks', TaskController::class)` для управления задачами.
  - Отдельные маршруты для редактирования и обновления задач:
    - `GET /tasks/{task}/edit` для редактирования.
    - `PUT /tasks/{task}` для обновления.

4. Контроллер TaskController
- Реализованы методы:
  - `index`: Отображает список всех задач.
  - `create`: Отображает форму для добавления задачи.
  - `store`: Сохраняет новую задачу в базу данных с валидацией.
  - `edit`: Отображает форму для редактирования задачи.
  - `update`: Обновляет существующую задачу с валидацией.
  - `show`: Показывает детальную информацию о задаче.

5. Формы и шаблоны
- Использованы Blade-шаблоны для отображения форм:
  - `create.blade.php`: Форма для добавления новой задачи.
  - `edit.blade.php`: Форма для редактирования задачи.
  - `index.blade.php`: Список всех задач с ссылками на редактирование и просмотр.
  - `show.blade.php`: Детальная информация о задаче.

6. Валидация данных
- Созданы классы запросов для валидации:
  - `CreateTaskRequest`: Используется при создании задачи.
  - `UpdateTaskRequest`: Используется при обновлении задачи.
- Добавлены правила валидации:
  - `title`: Обязательно, строка, минимум 3 символа.
  - `description`: Необязательно, строка, максимум 500 символов.
  - `due_date`: Обязательно, дата, не меньше текущей.
  - `category_id`: Обязательно, должна существовать в таблице `categories`.

7. Безопасность*
- Использована директива `@csrf` для защиты от CSRF-атак.
- Данные из форм обрабатываются через методы валидации для предотвращения SQL-инъекций и XSS.

8. Тестирование
- Проверены основные сценарии работы системы:
  - Создание задачи.
  - Редактирование задачи.
  - Валидация полей (например, отсутствие обязательных полей).
  - Корректное отображение ошибок в форме.
  - Безопасность форм и данных.



Результаты

- Реализовано CRUD-приложение для управления задачами:
  - Список задач.
  - Добавление новой задачи.
  - Редактирование существующей задачи.
  - Просмотр детальной информации о задаче.
- Обеспечена безопасность данных и корректность работы через валидацию.
- Интерфейс приложения удобен для пользователя.


Контрольные вопросы

1. Что такое валидация данных и зачем она нужна?
   Валидация проверяет корректность вводимых данных, предотвращая ошибки и уязвимости.

2. Как обеспечить защиту формы от CSRF-атак?
   Использовать директиву `@csrf` в Blade-шаблоне.

3. Как создать и использовать собственные классы запросов (Request) в Laravel?
   Использовать команду `php artisan make:request`, а затем определить правила в методе `rules()`.

4. Как защитить данные от XSS-атак при выводе в представлении?
   Использовать функцию `e()` или директиву `{{ }}` для безопасного отображения данных.

